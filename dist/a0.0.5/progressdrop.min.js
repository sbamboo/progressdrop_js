/* ProgressDrop is written by Simon Kalmi Claesson */
class ProgressBar{constructor(e,t="",r=!0,s=0,a=100){this.start=s,this.end=a,this.currentValue=s,this.container=e,this.showProgress=r,this.completed=!1,this.progressContainer=document.createElement("div"),this.progressContainer.className="progressdrop_container",this.progressContainer.style.width="100%",this.progressBar=document.createElement("div"),this.progressBar.className="progressdrop_bar",this.progressBar.style.width="0%",(t||r)&&(this.metaContainer=document.createElement("div"),this.metaContainer.className="progressdrop_meta",this.operationText=document.createElement("p"),this.operationText.textContent=t,this.percentageText=document.createElement("p"),this.percentageText.textContent=r?"0%":"",this.metaContainer.appendChild(this.operationText),this.metaContainer.appendChild(this.percentageText),this.progressContainer.appendChild(this.metaContainer)),this.progressContainer.appendChild(this.progressBar),e.appendChild(this.progressContainer)}calculatePercentage(){let e=this.end-this.start,t=this.currentValue-this.start;return t/e*100}update(e){this.currentValue=Math.max(this.start,Math.min(this.end,e));let t=this.calculatePercentage();this.progressBar.style.width=`${t}%`,this.showProgress&&this.metaContainer&&(this.percentageText.textContent=`${Math.round(t)}%`)}updateSameValue(){this.update(this.currentValue)}updateName(e){this.metaContainer&&(this.operationText.textContent=e)}progress(e){this.update(this.currentValue+e)}complete(){this.completed=!0,this.update(this.end)}reset(){this.completed=!1,this.update(this.start)}cleanUp(){this.complete(),setTimeout(()=>{this.progressContainer.remove()},500)}remove(){this.completed=!0,this.progressContainer.remove()}getMethods(){return{update:e=>this.update(e),updateSameValue:()=>this.updateSameValue(),updateName:e=>this.updateName(e),progress:e=>this.progress(e),complete:()=>this.complete(),reset:()=>this.reset(),cleanUp:()=>this.cleanUp(),remove:()=>this.remove(),_obj_:this}}}class ProgressLoader{constructor(e){this.parentElement=e,this.progressBars=[]}cleanUpAll(){this.progressBars.forEach(e=>{e.cleanUp()})}removeAll(){this.progressBars.forEach(e=>{e.remove()})}createProgressBar(e="",t=!0,r=0,s=100){let a=new ProgressBar(this.parentElement,e,t,r,s);return this.progressBars.push(a),a.getMethods()}async fetch(e,t=null,r=!0,s=!0,a=!1,o=!1){let n=this.createProgressBar(t||"Downloading...",r),i=await fetch(e);if(!i.ok)throw Error(`HTTP error! status: ${i.status}`);if(!i.body){if(a)return i;throw Error("ReadableStream not supported")}let p=i.body.getReader(),l=i.headers.get("content-length"),h=parseInt(l,10),d=0,c=new ReadableStream({async start(e){for(;;){let{done:t,value:r}=await p.read();if(t){s?n.cleanUp():n.complete(),e.close();break}d+=r.length,n.update(d/h*100),e.enqueue(r)}}}),g=new Response(c);return!0===o&&(g._progressdrop_obj_=n,g.getProgressObj=()=>n),g}async unzip(e,t=null,r=!0,s=!0,a=!1){let o=this.createProgressBar(t||"Unzipping...",r),n=new JSZip,i=await n.loadAsync(e,{async:!0,support:{arraybuffer:!0}}),p=Object.keys(i.files),l=p.length,h=0,d={};for(let c of p){let g=i.files[c];g.dir||(d[c]=await g.async("blob")),h++,o.update(h/l*100)}return s?o.cleanUp():o.complete(),!0===a&&(d._progressdrop_obj_=o,d.getProgressObj=()=>o),d}async zip(e,t=null,r=!0,s=!0,a=!1){let o=t||"Zipping...",n=this.createProgressBar(o,r),i=new JSZip,p=Object.entries(e),l=p.length,h=0;for(let[d,c]of(n.updateName(o+"(Adding files)"),p))i.file(d,c),h++,n.update(h/l*100);r&&(n.reset(),n.updateName(o+"(Writing blob)"));let g=await i.generateAsync({type:"blob"},r?e=>{n.update(e)}:void 0);return s?n.cleanUp():n.complete(),!0===a&&(g._progressdrop_obj_=n,g.getProgressObj=()=>n),g}async untar(e,t=null,r=!0,s=!0,a=!1){let o=this.createProgressBar(t||"Extracting Tar...",r),n=await e.arrayBuffer(),i=new tarball.TarReader,p=i.readArrayBuffer(n),l={},h=p.length,d=0;for(let c of p){let g=i.getFileBlob(c.name);l[c.name]=g,d++,o.update(h/d*100)}return s?o.cleanUp():o.complete(),!0===a&&(l._progressdrop_obj_=o,l.getProgressObj=()=>o),l}async tar(e,t=null,r=!0,s=!0,a=!1){let o=t||"Creating Tar...",n=this.createProgressBar(o,r),i=new tarball.TarWriter,p=Object.entries(e),l=p.length,h=0;for(let[d,c]of(n.updateName(o+"(Adding files)"),p)){if(c instanceof Blob)i.addFile(d,c);else if(c instanceof ArrayBuffer)i.addFileArrayBuffer(d,c);else throw Error("Unsupported file type.  Values must be Blob or ArrayBuffer.");h++,n.update(h/l*100)}r&&(n.reset(),n.updateName(o+"(Writing blob)"));let g=await i.writeBlob(r?e=>{n.update(e)}:void 0);return s?n.cleanUp():n.complete(),!0===a&&(g._progressdrop_obj_=n,g.getProgressObj=()=>n),g}async timeDelay(e,t,r=null,s=!0,a=!0,o=!1){let n=this.createProgressBar(r||"Processing...",s,0,e),i=Date.now(),p=i+e,l=new Promise(e=>{let r=()=>{let s=Date.now();n.update(s-i),s<p?setTimeout(r,t):(a?n.cleanUp():n.complete(),e())};r()});return!0===o&&(l._progressdrop_obj_=n,l.getProgressObj=()=>n),l}}