/* ProgressDrop is written by Simon Kalmi Claesson */
class ProgressBar{constructor(e,t="",r=!0,s=0,a=100){if(this.start=s,this.end=a,this.currentValue=s,this.container=e,this.showProgress=r,this.progressContainer=document.createElement("div"),this.progressContainer.className="progressdrop_container",this.progressContainer.style.width="100%",this.progressBar=document.createElement("div"),this.progressBar.className="progressdrop_bar",this.progressBar.style.width="0%",t||r){this.metaContainer=document.createElement("div"),this.metaContainer.className="progressdrop_meta";let n=document.createElement("p");n.textContent=t,this.percentageText=document.createElement("p"),this.percentageText.textContent=r?"0%":"",this.metaContainer.appendChild(n),this.metaContainer.appendChild(this.percentageText),this.progressContainer.appendChild(this.metaContainer)}this.progressContainer.appendChild(this.progressBar),e.appendChild(this.progressContainer)}calculatePercentage(){let e=this.end-this.start,t=this.currentValue-this.start;return t/e*100}update(e){this.currentValue=Math.max(this.start,Math.min(this.end,e));let t=this.calculatePercentage();this.progressBar.style.width=`${t}%`,this.showProgress&&this.metaContainer&&(this.percentageText.textContent=`${Math.round(t)}%`)}progress(e){this.update(this.currentValue+e)}complete(){this.update(this.end)}reset(){this.update(this.start)}cleanUp(){this.complete(),setTimeout(()=>{this.progressContainer.remove()},500)}getMethods(){return{update:e=>this.update(e),progress:e=>this.progress(e),complete:()=>this.complete(),reset:()=>this.reset(),cleanUp:()=>this.cleanUp(),_obj_:this}}}class ProgressLoader{constructor(e){this.parentElement=e,this.progressBars=[]}cleanUpAll(){this.progressBars.forEach(e=>{e.cleanUp()})}createProgressBar(e="",t=!0,r=0,s=100){let a=new ProgressBar(this.parentElement,e,t,r,s);return this.progressBars.push(a),a.getMethods()}async fetch(e,t=null,r=!0,s=!0,a=!1,n=!1){let i=this.createProgressBar(t||"Downloading...",r),o=await fetch(e);if(!o.ok)throw Error(`HTTP error! status: ${o.status}`);if(!o.body){if(a)return o;throw Error("ReadableStream not supported")}let l=o.body.getReader(),p=o.headers.get("content-length"),h=parseInt(p,10),c=0,g=new ReadableStream({async start(e){for(;;){let{done:t,value:r}=await l.read();if(t){s?i.cleanUp():i.complete(),e.close();break}c+=r.length,i.update(c/h*100),e.enqueue(r)}}}),d=new Response(g);return!0===n?[d,i]:d}async unzip(e,t=null,r=!0,s=!0,a=!1){let n=this.createProgressBar(t||"Unzipping...",r),i=new JSZip,o=await i.loadAsync(e,{async:!0,support:{arraybuffer:!0}}),l=Object.keys(o.files),p=l.length,h=0,c={};for(let g of l){let d=o.files[g];d.dir||(c[g]=await d.async("blob")),h++,n.update(h/p*100)}return(s?n.cleanUp():n.complete(),!0===a)?[c,n]:c}async zip(e,t=null,r=!0,s=!0,a=!1){let n=this.createProgressBar(t||"Zipping...",r),i=new JSZip,o=Object.entries(e),l=o.length,p=0;for(let[h,c]of o)i.file(h,c),p++,n.update(p/l*100);return(s?n.cleanUp():n.complete(),!0===a)?[await i.generateAsync({type:"blob"}),n]:await i.generateAsync({type:"blob"})}async timeDelay(e,t,r=null,s=!0,a=!0,n=!1){let i=this.createProgressBar(r||"Processing...",s,0,e),o=Date.now(),l=o+e,p=new Promise(e=>{let r=()=>{let s=Date.now();i.update(s-o),s<l?setTimeout(r,t):(a?i.cleanUp():i.complete(),e())};r()});return!0===n?[p,i]:p}}