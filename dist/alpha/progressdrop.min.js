/* ProgressDrop is written by Simon Kalmi Claesson */
class ProgressBar{constructor(e,t="",r=!0,s=0,a=100){if(this.start=s,this.end=a,this.currentValue=s,this.container=e,this.showProgress=r,this.progressContainer=document.createElement("div"),this.progressContainer.className="progressdrop_container",this.progressContainer.style.width="100%",this.progressBar=document.createElement("div"),this.progressBar.className="progressdrop_bar",this.progressBar.style.width="0%",t||r){this.metaContainer=document.createElement("div"),this.metaContainer.className="progressdrop_meta";let n=document.createElement("p");n.textContent=t,this.percentageText=document.createElement("p"),this.percentageText.textContent=r?"0%":"",this.metaContainer.appendChild(n),this.metaContainer.appendChild(this.percentageText),this.progressContainer.appendChild(this.metaContainer)}this.progressContainer.appendChild(this.progressBar),e.appendChild(this.progressContainer)}calculatePercentage(){let e=this.end-this.start,t=this.currentValue-this.start;return t/e*100}update(e){this.currentValue=Math.max(this.start,Math.min(this.end,e));let t=this.calculatePercentage();this.progressBar.style.width=`${t}%`,this.showProgress&&this.metaContainer&&(this.percentageText.textContent=`${Math.round(t)}%`)}updateSameValue(){this.update(this.currentValue)}progress(e){this.update(this.currentValue+e)}complete(){this.update(this.end)}reset(){this.update(this.start)}cleanUp(){this.complete(),setTimeout(()=>{this.progressContainer.remove()},500)}getMethods(){return{update:e=>this.update(e),progress:e=>this.progress(e),complete:()=>this.complete(),reset:()=>this.reset(),cleanUp:()=>this.cleanUp(),_obj_:this}}}class ProgressLoader{constructor(e){this.parentElement=e,this.progressBars=[]}cleanUpAll(){this.progressBars.forEach(e=>{e.cleanUp()})}createProgressBar(e="",t=!0,r=0,s=100){let a=new ProgressBar(this.parentElement,e,t,r,s);return this.progressBars.push(a),a.getMethods()}async fetch(e,t=null,r=!0,s=!0,a=!1,n=!1){let o=this.createProgressBar(t||"Downloading...",r),i=await fetch(e);if(!i.ok)throw Error(`HTTP error! status: ${i.status}`);if(!i.body){if(a)return i;throw Error("ReadableStream not supported")}let p=i.body.getReader(),l=i.headers.get("content-length"),h=parseInt(l,10),c=0,g=new ReadableStream({async start(e){for(;;){let{done:t,value:r}=await p.read();if(t){s?o.cleanUp():o.complete(),e.close();break}c+=r.length,o.update(c/h*100),e.enqueue(r)}}}),d=new Response(g);return!0===n&&(d._progressdrop_obj_=o,d.getProgressObj=()=>o),d}async unzip(e,t=null,r=!0,s=!0,a=!1){let n=this.createProgressBar(t||"Unzipping...",r),o=new JSZip,i=await o.loadAsync(e,{async:!0,support:{arraybuffer:!0}}),p=Object.keys(i.files),l=p.length,h=0,c={};for(let g of p){let d=i.files[g];d.dir||(c[g]=await d.async("blob")),h++,n.update(h/l*100)}return s?n.cleanUp():n.complete(),!0===a&&(c._progressdrop_obj_=n,c.getProgressObj=()=>n),c}async zip(e,t=null,r=!0,s=!0,a=!1){let n=this.createProgressBar(t||"Zipping...",r),o=new JSZip,i=Object.entries(e),p=i.length,l=0;for(let[h,c]of i)o.file(h,c),l++,n.update(l/p*100);s?n.cleanUp():n.complete();let g=await o.generateAsync({type:"blob"});return!0===a&&(g._progressdrop_obj_=n,g.getProgressObj=()=>n),g}async timeDelay(e,t,r=null,s=!0,a=!0,n=!1){let o=this.createProgressBar(r||"Processing...",s,0,e),i=Date.now(),p=i+e,l=new Promise(e=>{let r=()=>{let s=Date.now();o.update(s-i),s<p?setTimeout(r,t):(a?o.cleanUp():o.complete(),e())};r()});return!0===n&&(l._progressdrop_obj_=o,l.getProgressObj=()=>o),l}}