class ProgressBar{constructor(e,t="",s=!0,r=0,a=100){if(this.start=r,this.end=a,this.currentValue=r,this.container=e,this.showProgress=s,this.progressContainer=document.createElement("div"),this.progressContainer.className="progressive_container",this.progressContainer.style.width="100%",this.progressBar=document.createElement("div"),this.progressBar.className="progressive_bar",this.progressBar.style.width="0%",t||s){this.metaContainer=document.createElement("div"),this.metaContainer.className="progressive_meta";let n=document.createElement("p");n.textContent=t,this.percentageText=document.createElement("p"),this.percentageText.textContent=s?"0%":"",this.metaContainer.appendChild(n),this.metaContainer.appendChild(this.percentageText),this.progressContainer.appendChild(this.metaContainer)}this.progressContainer.appendChild(this.progressBar),e.appendChild(this.progressContainer)}calculatePercentage(){let e=this.end-this.start,t=this.currentValue-this.start;return t/e*100}update(e){this.currentValue=Math.max(this.start,Math.min(this.end,e));let t=this.calculatePercentage();this.progressBar.style.width=`${t}%`,this.showProgress&&this.metaContainer&&(this.percentageText.textContent=`${Math.round(t)}%`)}progress(e){this.update(this.currentValue+e)}complete(){this.update(this.end)}reset(){this.update(this.start)}cleanUp(){this.complete(),setTimeout(()=>{this.progressContainer.remove()},500)}getMethods(){return{update:e=>this.update(e),progress:e=>this.progress(e),complete:()=>this.complete(),reset:()=>this.reset(),cleanUp:()=>this.cleanUp(),_obj_:this}}}class ProgressiveLoader{constructor(e){this.parentElement=e,this.progressBars=[]}cleanUpAll(){this.progressBars.forEach(e=>{e.cleanUp()})}createProgressBar(e="",t=!0,s=0,r=100){let a=new ProgressBar(this.parentElement,e,t,s,r);return this.progressBars.push(a),a.getMethods()}async fetch(e,t=null,s=!0,r=!0,a=!1){let n=this.createProgressBar(t||"Downloading...",s),i=await fetch(e);if(!i.ok)throw Error(`HTTP error! status: ${i.status}`);if(!i.body){if(a)return i;throw Error("ReadableStream not supported")}let o=i.body.getReader(),l=i.headers.get("content-length"),h=parseInt(l,10),p=0,c=new ReadableStream({async start(e){for(;;){let{done:t,value:s}=await o.read();if(t){r?n.cleanUp():n.complete(),e.close();break}p+=s.length,n.update(p/h*100),e.enqueue(s)}}});return new Response(c)}async unzip(e,t=null,s=!0,r=!0){let a=this.createProgressBar(t||"Unzipping...",s),n=new JSZip,i=await n.loadAsync(e,{async:!0,support:{arraybuffer:!0}}),o=Object.keys(i.files),l=o.length,h=0,p={};for(let c of o){let g=i.files[c];g.dir||(p[c]=await g.async("blob")),h++,a.update(h/l*100)}return r?a.cleanUp():a.complete(),p}async zip(e,t=null,s=!0,r=!0){let a=this.createProgressBar(t||"Zipping...",s),n=new JSZip,i=Object.entries(e),o=i.length,l=0;for(let[h,p]of i)n.file(h,p),l++,a.update(l/o*100);return r?a.cleanUp():a.complete(),await n.generateAsync({type:"blob"})}async timeDelay(e,t,s=null,r=!0,a=!0){let n=this.createProgressBar(s||"Processing...",r,0,e),i=Date.now(),o=i+e;return new Promise(e=>{let s=()=>{let r=Date.now();n.update(r-i),r<o?setTimeout(s,t):(a?n.cleanUp():n.complete(),e())};s()})}}